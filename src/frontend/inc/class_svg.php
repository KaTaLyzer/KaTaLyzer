<?php

class svg {
	private $xml;
	private $width;
	private $height;
	private $data = Array();
	private $style = Array();
	private	$graph_shift_x;
	private	$graph_shift_y;
	private	$graph_size_x;
	private	$graph_size_y;
	private $logarithmic=false;
	public $unit;
	private $y_name;
	private $bottom_zoom;
	private $top_zoom;
	private $grid_color;
	private $grid_thickness;
	private $frame_color;
	private $kilo;
	private $text_color;
	private $bg_color;
	public $graph_max_value;
	public $graph_min_value;
	public $prefix;

	/***
	   *	Constructor
	   */
	function svg(){
		$this->set_resolution();
		$this->set_padding();
		$this->grid_color = 'black';
		$this->frame_color = 'black';
		$this->grid_thickness = 0.5;
		$this->kilo = 1024;
		$this->y_name = '';
		$this->unit = 'bit/s';
		$this->text_color = 'black';
		$this->bg_color = false;
	}

	/***
	   *	Set resolution of svg image, width+height
	   */
	function set_resolution($w=940,$h=300){
		$old_width = $this->width;
		$old_height = $this->height;
		if($w>10 && $w<10000)
			$this->width = round($w);
		else
			$this->width = 940;
		if($h>10 && $h<10000)
			$this->height = round($h);
		else
			$this->height = 300;
		if(isset($this->graph_size_x)){
			$this->graph_size_y = $this->height - $old_height + $this->graph_size_y;
			$this->graph_size_x = $this->width - $old_width + $this->graph_size_x;
		}
	}

	/***
	   *	Set padding top, right, bottom, left (CSS style)
	   */
	function set_padding($top=10.5,$right=10.5,$bottom=39.5,$left=60.5){
		$this->graph_shift_x = $left;
		$this->graph_shift_y = $top;
		$this->graph_size_x = $this->width-$right-$left;
		$this->graph_size_y = $this->height-$top-$bottom;
	}

	/***
	   *	insert data array format = [timestamp]=value
	   */
	function insert($input_array,$name=false){
		// timestamp & value test
		foreach($input_array as $timestamp => $value){
			if(!is_numeric($timestamp) || !is_numeric($value)){
				return false;
			}
		}
		if(!$name)
			$this->data[] = $input_array;
		else
			$this->data[$name] = $input_array;
	}

	/***
	   *	Set logarithmic axis
	   */
	function logarithmic($i=true){
		if($i) $this->logarithmic = true;
		else $this->logarithmic = false;
	}
	function top_zoom($top_zoom=1){
		$this->top_zoom = $top_zoom;
	}
	function bottom_zoom($bottom_zoom=1){
		$this->bottom_zoom = $bottom_zoom;
	}

	function graph_color($x,$name){		// example '0,0,255','graph1'
		$this->style[$name]['color'] = $x;
	}
	function graph_thickness($x,$name){	// 1,'graph1'
		$this->style[$name]['stroke_width'] = $x;
	}
	function unit($x){	// bit/s, packets/s ...
		$this->unit = $x;
	}
	function name($name){	// eth0 traffic, cpu temp ...
		$this->y_name = $name;
	}
	function grid_color($grid_color){
		$this->grid_color = $grid_color;
	}
	function frame_color($frame_color){
		$this->frame_color = $frame_color;
	}
	function grid_thickness($grid_thickness){
		$this->grid_thickness = $grid_thickness;
	}
	function kilo($kilo=true){	// true = KB,MB,GB ; false = KiB,MiB,TiB
		if($kilo == true)
			$this->kilo = 1000;
		else
			$this->kilo = 1024;
	}
	function text_color($color){
		$this->text_color = $color;
	}
	function background_color($color){
		$this->bg_color = $color;
	}

	
	/***
	  *	insert line
	  *	@param position,color,line thicknes in px
	  */
	private function line($position,$rgb_color='black',$stroke_width=1){
		return '<g style="fill: none; color: black; stroke: currentcolor; stroke-width: '.$stroke_width.
			'; stroke-linecap: butt; stroke-linejoin: miter;">
	<path style="stroke: '.$rgb_color.';" d="'.$position.' "/>'."\n".'</g>'."\n";
	}

	/***
	  *	insert text
	  *	@param text, position,rotate,align,color
	  */
	private function text($text,$position,$rotate=false,$align='end',$color='black'){
		if($rotate) {$rot_string = 'rotate(-90)';} else $rot_string = '';
		return '<g transform="translate('.$position.') '.$rot_string.
		'" style="stroke: none; fill: '.$this->text_color.'; font-family: arial; font-size: 10pt; text-anchor: '.$align.';">
		<text>'.$text.'</text>'."\n".'</g>'."\n";
	}

	private function generate(){

		// headers
		$this->xml = '<?xml version="1.0" encoding="UTF-8" standalone="no"?>'."\n";
		$this->xml .= '<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">'."\n";
		$this->xml .= '<svg width="'.$this->width.'" height="'.$this->height.'" viewBox="0 0 '.$this->width.' '.$this->height.
				'" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">'."\n";
		$this->xml .= '<desc>Generated by KaTaLyzer svg class</desc>'."\n\n";

		// defs section
		$this->xml .= '<defs>'."\n";

		$this->xml .= '</defs>'."\n\n";

		// body section
		if($this->bg_color!=false)
  			$this->xml .= '<rect style="fill:'.$this->bg_color.
				';fill-rule:evenodd;" width="'.$this->width.
				'" height="'.$this->height.'" x="0" y="0" />';



		// max, min timestamp/value
		foreach($this->data as $data){
			$max_val[] = max($data);
			$min_val[] = min($data);
			$max_time[] = max(array_keys($data));
			$min_time[] = min(array_keys($data));
		}
		$max_val = max($max_val);
		$min_val = min($min_val);
		$max_time = max($max_time);
		$min_time = min($min_time);
		// if max-min = 0 input error (division by zero problem)
		if($max_val == $min_val) $max_val = $min_val + 1;

		// ----------------------------------------------
		// grid Y			( shit happens )
		if($this->logarithmic && $min_val >= 0){	// logarithmic grid
			if($min_val == 0) $min_val = 1;
			$min_val = pow(10,floor(log10($min_val)));
			$max_val = pow(10,ceil(log10($max_val)));
			if(log10($max_val)-log10($min_val) < 3) $max_val = pow(10,log10($max_val)+1);
			$this->xml .= $this->text($this->y_name.' ['.$this->unit.']',($this->graph_shift_x/2.5).', '.($this->graph_size_y/2+$this->graph_shift_y),true,'middle');
			$range = log10($max_val)-log10($min_val);
			$grid=''; $subgrid=''; $grid_thin='';
			$this->xml .= $this->text('<tspan x="0">10</tspan><tspan font-size="8.0pt" dy="-5.00pt">'.log10($min_val).'</tspan>',($this->graph_shift_x-5).', '.($this->graph_shift_y + $this->graph_size_y+3.5));
			for($i=log10($min_val)+1;$i<=log10($max_val);$i++){
				$y = -( ($i-log10($min_val))*$this->graph_size_y ) / $range + $this->graph_shift_y + $this->graph_size_y;
				$this->xml .= $this->text('<tspan x="0">10</tspan><tspan font-size="8.0pt" dy="-5.00pt">'.$i.'</tspan>',($this->graph_shift_x-5).', '.($y+9.5));
				$grid .= " M".$this->graph_shift_x.",$y L".($this->graph_size_x+$this->graph_shift_x).",$y";
				$subgrid .= " M".$this->graph_shift_x.",$y L".($this->graph_shift_x+6).",$y M".($this->graph_size_x+$this->graph_shift_x).",$y L".($this->graph_size_x+$this->graph_shift_x-6).",$y";
				for($k=2;$k<10;$k=$k+2){
					$y2 = $y + ($this->graph_size_y/$range)*(1-log10($k));
					$subgrid .= " M".$this->graph_shift_x.",$y2 L".($this->graph_shift_x+4).",$y2 M".($this->graph_size_x+$this->graph_shift_x).",$y2 L".($this->graph_size_x+$this->graph_shift_x-4).",$y2";
					$grid_thin .= " M".$this->graph_shift_x.",$y2 L".($this->graph_size_x+$this->graph_shift_x).",$y2";
				}
				
			}
			$this->xml .= $this->line($grid,$this->grid_color,$this->grid_thickness);
			$this->xml .= $this->line($grid_thin,$this->grid_color,$this->grid_thickness/3);
			$this->xml .= $this->line($subgrid,$this->frame_color,1);
		} else {		// linear grid
			if($min_val < $max_val/10 && $min_val > 0)
				$min_val = 0;
			if($min_val < 0) {$minus = -10; $minus_2 = -2;} else { $minus = 1; $minus_2 = 1; }
			if($this->kilo == 1024)
				$min_val = $minus_2*pow(2,floor(log(abs($min_val),2)));
			else
				$min_val = $minus*pow(10,floor(log10(abs($min_val))));
			
			$zoom_range = $max_val-$min_val;
			if(isset($this->top_zoom) && $this->top_zoom <= 1000000 && $this->top_zoom > 0){
				$max_val = $zoom_range*$this->top_zoom;
			}
			if(isset($this->bottom_zoom) && $this->bottom_zoom < 1 && $this->bottom_zoom >= 0){
				$min_val = $min_val+$zoom_range*$this->bottom_zoom;
			}
			if($this->kilo==1024) $i='i'; else $i='';
			if($max_val > 2*$this->kilo*$this->kilo*$this->kilo) {$prefix='G'.$i;$mult=$this->kilo*$this->kilo*$this->kilo;}
			elseif($max_val > 2*$this->kilo*$this->kilo) {$prefix='M'.$i;$mult=$this->kilo*$this->kilo;}
			elseif ($max_val > 2*$this->kilo) {$prefix='K'.$i;$mult=$this->kilo;}
			else {$prefix='';$mult=1;}
			
			$this->xml .= $this->text($this->y_name.' ['.$prefix.$this->unit.']',($this->graph_shift_x/2.5).', '.($this->graph_size_y/2+$this->graph_shift_y),true,'middle');
	
			$min_val_mult = $min_val/$mult;
			$max_val_mult = $max_val/$mult;
			$range = $max_val_mult-$min_val_mult;
			$exponent = ceil(log10($range))-1;
			$first_num = floor($range/pow(10,$exponent));
	
			if($first_num < 2)
				$step=2;
			elseif($first_num < 5)
				$step = 5;
			elseif($first_num <= 10)
				$step = 10;
	
			$var = $min_val_mult;
			$grid=''; $subgrid='';
			while($var<$max_val_mult){
				$y = -( ($var-$min_val_mult)*$this->graph_size_y ) / $range + $this->graph_shift_y + $this->graph_size_y;
				$grid .= " M".$this->graph_shift_x.",$y L".($this->graph_size_x+$this->graph_shift_x).",$y";
				$subgrid .= " M".$this->graph_shift_x.",$y L".($this->graph_shift_x+6).",$y M".($this->graph_shift_x+$this->graph_size_x).",$y L".($this->graph_shift_x+$this->graph_size_x-6).",$y";
	
				$this->xml .= $this->text(round($var,2),($this->graph_shift_x-5).', '.($y+3.5));
				$var = $var+$step*pow(10,$exponent-1);
			}
			$this->xml .= $this->line($grid,$this->grid_color,$this->grid_thickness);
			$this->xml .= $this->line($subgrid,$this->frame_color,1);
		}
		$this->graph_max_value = $max_val;
		$this->graph_min_value = $min_val;
		if(isset($prefix))
			$this->prefix = $prefix;
		else
			$this->prefix = '';

		// ----------------------------------------------
		// grid X - time

		$t_range = $max_time - $min_time;
		if($t_range < 24*60*60){		// t < 1day		-> time only
			$format_1line = 'H:i';
			$format_2line = '';
		}elseif($t_range < 31*24*60*60){	// 1day < t < 1month	-> time + date
			$format_1line = 'd/m';
			$format_2line = 'H:i';
		}else{					// t > 1month           -> date + year
			$format_1line = 'd/m';
			$format_2line = 'Y';
		}
		// scale from 5 min to 4 years
		$m=20;
		if($t_range <= $m*60) $jump = 60;		// 1 min
		elseif($t_range <= 2*$m*60) $jump = 2*60;	// 2 min
		elseif($t_range <= 5*$m*60) $jump = 5*60;	// 5 min
		elseif($t_range <= 10*$m*60) $jump = 10*60;	// 10 min
		elseif($t_range <= 30*$m*60) $jump = 30*60;	// 30 min
		elseif($t_range <= 60*$m*60) $jump = 60*60;		// 1 h
		elseif($t_range <= 2*60*$m*60) $jump = 2*60*60;		// 2 h
		elseif($t_range <= 5*60*$m*60) $jump = 5*60*60;		// 5 h
		elseif($t_range <= 10*60*$m*60) $jump = 10*60*60;	// 10 h
		elseif($t_range <= 24*60*$m*60) $jump = 24*60*60;	// 24 h
		elseif($t_range <= 7*24*60*$m*60) $jump = 7*24*60*60;	// 7 days
		elseif($t_range <= 31*24*60*$m*60) $jump = 31*24*60*60;	// 31 days
		else $jump = 2*31*24*60*60;

		$t = ceil($min_time/$jump)*$jump-$jump;	// grid begining
		if($t_range > 24*60*60)		// grid shift: time zone + summer/winter time
			$t = $t-date("Z");

		for(;$t < $max_time;$t+=$jump){
			$x = ( ($t-$min_time)*$this->graph_size_x ) / $t_range + $this->graph_shift_x;

			for($k=0.2;$k<1;$k=$k+0.2){
				$x2 = $x + (($jump*$this->graph_size_x) / $t_range)*$k;
				if($x2 > $this->graph_shift_x && $x2 < $this->graph_shift_x+$this->graph_size_x )
				$subgrid .= " M$x2,".$this->graph_shift_y." L".$x2.",".($this->graph_shift_y+4)." M$x2,".($this->graph_shift_y+$this->graph_size_y)." L".$x2.",".($this->graph_shift_y+$this->graph_size_y-4);
			}
			if($x > $this->graph_shift_x && $x < $this->graph_shift_x+$this->graph_size_x ){
				$this->xml .= $this->text(date($format_1line,$t),$x.', '.($this->graph_shift_y+$this->graph_size_y+15),false,'middle');
				$this->xml .= $this->text(date($format_2line,$t),$x.', '.($this->graph_shift_y+$this->graph_size_y+29),false,'middle');
				$grid .= " M$x,".$this->graph_shift_y." L".$x.",".($this->graph_shift_y+$this->graph_size_y);
				$subgrid .= " M$x,".$this->graph_shift_y." L".$x.",".($this->graph_shift_y+6)." M$x,".($this->graph_shift_y+$this->graph_size_y)." L".$x.",".($this->graph_shift_y+$this->graph_size_y-6);
			}
		}
		$this->xml .= $this->line($grid,$this->grid_color,$this->grid_thickness);
		$this->xml .= $this->line($subgrid,$this->frame_color,1);

		// calculating graph position & printing
		foreach($this->data as $name => $data){

			ksort($data);
			$first = true; $svg_pos = '';

			for($i=0;$i<count($data);$i++){
				if($i%5==0) $svg_pos .= "\n\t\t\t";
				$v1 = current($data);
				$t1 = key($data);
				$v2 = next($data);
				$t2 = key($data);
			
				if($this->logarithmic && $min_val > 0){
					if($v1<$min_val) $v1=$min_val;
					$x_pos = ( ($t1-$min_time)*$this->graph_size_x ) / ($max_time-$min_time) + $this->graph_shift_x;
					$y_pos = -( log10($v1/$min_val) / log10($max_val/$min_val) ) * $this->graph_size_y 
						 + $this->graph_shift_y + $this->graph_size_y;
					if($first){
						$svg_pos .= ' M';
						$first = false;
					}
					else
						$svg_pos .= ' L';
					$svg_pos .= round($x_pos,4).','.round($y_pos,4);
				}else{	// prerobit !!!
					$x1 = ( ($t1-$min_time)*$this->graph_size_x ) / ($max_time-$min_time) + $this->graph_shift_x;
					$y1 = -( ($v1-$min_val)*$this->graph_size_y ) / ($max_val-$min_val)
						 + $this->graph_shift_y + $this->graph_size_y;
					$y2 = -( ($v2-$min_val)*$this->graph_size_y ) / ($max_val-$min_val)
						+ $this->graph_shift_y + $this->graph_size_y;
					$x2 = ( ($t2-$min_time)*$this->graph_size_x ) / ($max_time-$min_time) + $this->graph_shift_x;

					if($first){
						$vect_begin = ' M';
						$first = false;
					}
					else
						$vect_begin = ' L';

					if(
						$y1 >= $this->graph_shift_y
						&& $y2 >= $this->graph_shift_y
						&& $y1 <= $this->graph_shift_y + $this->graph_size_y
						&& $y2 <= $this->graph_shift_y + $this->graph_size_y
					){
						$svg_pos .= $vect_begin.round($x1,4).','.round($y1,4);
					}elseif(
						($y1 < $this->graph_shift_y && $y2 < $this->graph_shift_y)
						|| ($y1 > $this->graph_shift_y + $this->graph_size_y && $y2 > $this->graph_shift_y + $this->graph_size_y)
					){
						$first = true;
					}else{
						if($i+1==count($data)) { $y2=$y1; $x2=$x1; $k=0; }
						else
							$k = ($y2-$y1)/($x2-$x1);
						$q = min($y1,$y2);
						if($y1 < $this->graph_shift_y){
							$y1 = $this->graph_shift_y;
							if($k!=0)
								$x1 = ($this->graph_shift_y-$q)/$k+$x1;
						}elseif($y1 > $this->graph_shift_y + $this->graph_size_y){
							$y1 = $this->graph_shift_y + $this->graph_size_y;
							if($k!=0)
								$x1 = (($this->graph_shift_y + $this->graph_size_y)-$q)/$k+$x2;
						}else{
							$svg_pos .= $vect_begin.round($x1,4).','.round($y1,4);
						}
						$svg_pos .= $vect_begin.round($x1,4).','.round($y1,4);
						if($y2 < $this->graph_shift_y){
							$y2 = $this->graph_shift_y;
							if($k!=0)
								$x2 = ($this->graph_shift_y-$q)/$k+$x2;
							$first = true;
							$svg_pos .= ' L'.round($x2,4).','.round($y2,4);
						}elseif($y2 > $this->graph_shift_y + $this->graph_size_y){
							$y2 = $this->graph_shift_y + $this->graph_size_y;
							if($k!=0)
								$x2 = (($this->graph_shift_y + $this->graph_size_y)-$q)/$k+$x1;
							$first = true;
							$svg_pos .= ' L'.round($x2,4).','.round($y2,4);
						}
					}
					
				}

			}

			// line color check
			if(isset($this->style[$name]['color']))
				$line_color = $this->style[$name]['color'];
			else
				$line_color = 'red';

			// stroke width check
			if(isset($this->style[$name]['stroke_width']))
				$stroke_width = $this->style[$name]['stroke_width'];
			else
				$stroke_width = 1;

			$this->xml .= $this->line($svg_pos,$line_color,$stroke_width);
		}


		// print frame
		$this->xml .= $this->line(
				' M'.$this->graph_shift_x.','.$this->graph_shift_y.
				' L'.($this->graph_shift_x + $this->graph_size_x).','.$this->graph_shift_y.
				' L'.($this->graph_shift_x + $this->graph_size_x).','.($this->graph_shift_y + $this->graph_size_y).
				' L'.$this->graph_shift_x.','.($this->graph_shift_y + $this->graph_size_y).
				' L'.$this->graph_shift_x.','.$this->graph_shift_y.
				' Z '
				,$this->frame_color,1);

		$this->xml .= '</svg>';
	}

	/***
	   *	Print xml
	   */
	function draw(){
		$this->generate();
		echo $this->xml;
	}
	/***
	  *	Return xml
	  */
	function ret(){
		$this->generate();
		return $this->xml;
	}
}
?>
